[tool.poetry]
name = "app"
version = "1.0.0"
readme = "README.md"
authors = ["afiovinicius <afiovinicius@gmail.com>"]
homepage = "https://apis.vicit.studio"
repository = "https://github.com/afiovinicius/apis-api/tree/develop"
documentation = "https://apis-api.onrender.com/redoc"
description = "API REST da Apis. Um webapp de produtividade que permite controle colaborativo das suas atividades e colegas."

[tool.poetry.dependencies]
python = "^3.11.9" # Vers√£o usada no ambiente de webservice do render
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
gunicorn = "^22.0.0"
fastapi-mail = "^1.4.1"
pydantic = {extras = ["email"], version = "^2.7.4"}
pydantic-settings = "^2.3.1"
python-multipart = "^0.0.9"
sqlalchemy = "^2.0.30"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
supabase = "^2.5.0"
pyjwt = "^2.8.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = "^3.3.0"
bcrypt = "^4.1.3"
redis = {extras = ["hiredis"], version = "^5.0.6"}
redis-cli = "^1.0.1"
aioredis = "^2.0.1"
jinja2 = "^3.1.4"
ignr = "^2.2"
asyncio = "^3.4.3"
distutils-extra-python = "^2.39.2"
setuptools = "^70.1.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
taskipy = "^1.12.2"
ruff = "^0.4.8"
pytest-cov = "^5.0.0"
httpx = "^0.27.0"
blue = "^0.9.1"
isort = "^5.13.2"
ignr = "^2.2"

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

[tool.ruff]
line-length = 80
exclude = ['.venv', 'alembic']

[tool.ruff.lint]
preview = true
ignore = ["E501"]
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true

[tool.isort]
profile = "black"
line_length = 80
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
force_grid_wrap = 0
combine_as_imports = true
lines_between_types = 0
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
default_section = "THIRDPARTY"
known_first_party = ["app"]

[tool.taskipy.tasks]
lint = 'ruff check . && ruff check . --diff'
format = 'ruff check . --fix && ruff format . && isort .'
dev = 'task format && uvicorn app.main:app --reload'
start = 'gunicorn -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8080'
pre_test = 'task lint'
test = 'pytest -s -x --cov=app -vv'
post_test = 'coverage html'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
